```{r}
library(brms)
library(magrittr)
library(ggplot2)
library(tidyr)
library(faux)
library(tidybayes)
library(dplyr)
library(mediation)
```

## Generate the design

```{r}

gen_data <- function(seed,n){
  set.seed(seed)
 between <- list(P = c("counter","neutral","fit")) 
 ## negative -> counter
 ## neutral -> neutral
 ## positive -> fit
 ## PF -> dPT
 ## dPO -> exPO
 
 df <- sim_design(list(), between, n = n,plot=FALSE)
 df$dPT = runif(nrow(df), min = 4, max = 7) ## 4 - 7 seconds
 df$exPO = runif(nrow(df), min = 0, max = 2)#rep(1:5,nrow(df)/5); coded as extremity
 df$J1  = runif(nrow(df), min = 1, max = 5)#rep(1:5,nrow(df)/5)
 df$J2  = runif(nrow(df), min = 1, max = 5)#rep(1:5,nrow(df)/5)
 df$J3  = runif(nrow(df), min = 1, max = 5)#rep(1:5,nrow(df)/5)
 df$J4  = runif(nrow(df), min = 1, max = 5)#rep(1:5,nrow(df)/5)
 df
}
df = gen_data(1,100) # 100 subjects per group
head(df)
```

## Define the model

```{r}
 
 library(brms)
 model_mediator1 <- bf(dPT ~ 0+P)
 #model_mediator2 <- bf(J1 ~ 1+P + PF, family = cumulative("logit"))
 model_mediator2 <- bf(J1 ~ 0+P + dPT)
 model_mediator3 <- bf(J2 ~ 0+P + dPT)
 model_mediator4 <- bf(J3 ~ 0+P + dPT)
 model_mediator5 <- bf(J4 ~ 0+P + dPT)
 model_outcome  <- bf(exPO ~ 0+P + dPT + J1+J2+J3+J4)#, family = cumulative("logit"))
```

## Define the priors

```{r}
priors = c(
     prior(normal( 0.2,0.1), coef = "Pcounter",resp="dPT"),
     prior(normal( 0.0,0.1), coef = "Pneutral",resp="dPT"), 
     prior(normal(-0.2,0.1), coef = "Pfit",resp="dPT"),
     
     prior(normal(-0.5,0.5), coef = "Pcounter",resp="J1"),
     prior(normal( 0.0,0.5), coef = "Pneutral",resp="J1"),
     prior(normal( 0.5,0.5), coef = "Pfit",resp="J1"),
     prior(normal(-1.0,0.5), coef = "dPT",resp="J1"),
     
          
     prior(normal(-0.5,0.5), coef = "Pcounter",resp="J2"),
     prior(normal( 0.0,0.5), coef = "Pneutral",resp="J2"),
     prior(normal( 0.5,0.5), coef = "Pfit",resp="J2"),
     prior(normal(-1.0,0.5), coef = "dPT",resp="J2"),
     
          
     prior(normal(-0.5,0.5), coef = "Pcounter",resp="J3"),
     prior(normal( 0.0,0.5), coef = "Pneutral",resp="J3"),
     prior(normal( 0.5,0.5), coef = "Pfit",resp="J3"),
     prior(normal(-1.0,0.5), coef = "dPT",resp="J3"),
     
     
          
     prior(normal(-0.5,0.5), coef = "Pcounter",resp="J4"),
     prior(normal( 0.0,0.5), coef = "Pneutral",resp="J4"),
     prior(normal( 0.5,0.5), coef = "Pfit",resp="J4"),
     prior(normal(-1.0,0.5), coef = "dPT",resp="J4"),
     
     
     prior(normal(-0.25,0.5), coef = "Pcounter",resp="exPO"),
     prior(normal( 0.0 ,0.5), coef = "Pneutral",resp="exPO"),
     prior(normal( 0.25,0.5), coef = "Pfit",resp="exPO"),
     
     prior(normal( 1.0,0.4), coef = "J1",resp="exPO"), #
     prior(normal( 0.2,0.2), coef = "J2",resp="exPO"), #
     prior(normal( 0.2,0.2), coef = "J3",resp="exPO"), #
     prior(normal( 0.2,0.2), coef = "J4",resp="exPO"), #

     prior(normal( 0 ,0.5), coef = "dPT",resp="exPO"),
   
     prior(normal(0,1), class = "sigma",resp="exPO"),
     prior(normal(0,1), class = "sigma",resp="J1"),
     prior(normal(0,1), class = "sigma",resp="J2"),
     prior(normal(0,1), class = "sigma",resp="J3"),
     prior(normal(0,1), class = "sigma",resp="J4"),
     prior(normal(0,1), class = "sigma",resp="dPT")
   )
```

## Sample parameters from the prior

We once need to sample the model to get the actual parameters. We can reuse the model later to fit those parameters and check how often we can come to the correct conclusions

```{r}
#| output: false
 # J1 => Truth
 # J2 => Trust
 # J3 => Familiarity
 # J4 => Likeability
 med_prior = brm(
   model_mediator1 + model_mediator2  + model_mediator3 + model_mediator4 +  model_mediator5+ model_outcome + set_rescor(FALSE), 
   prior = priors,
   data = df, sample_prior="only",cores=4,chains=4,refresh=0)

med_model = brm(
   model_mediator1 + model_mediator2 + model_mediator3 + model_mediator4 +  model_mediator5 + model_outcome + set_rescor(FALSE), 
   data = df,cores=4,chains=4,refresh=0)
```

## Generate the Prior Distribution

::: {callout-note}
We generate 50 predictions based on the prior and visualize the data we get.
:::

```{r}

iterative_draw_posterior = function(med_prior,df,draw_id){
    
  f_dPT = posterior_predict(med_prior,newdata=data.frame(P=df$P),resp="dPT",summary=FALSE,draw_ids=draw_id)
  f_j1 = posterior_predict(med_prior,newdata=data.frame(P=df$P,dPT=f_dPT[1,]),resp="J1",summary=FALSE,draw_ids=draw_id)
  f_j2 = posterior_predict(med_prior,newdata=data.frame(P=df$P,dPT=f_dPT[1,]),resp="J2",summary=FALSE,draw_ids=draw_id)
  f_j3 = posterior_predict(med_prior,newdata=data.frame(P=df$P,dPT=f_dPT[1,]),resp="J3",summary=FALSE,draw_ids=draw_id)
  f_j4 = posterior_predict(med_prior,newdata=data.frame(P=df$P,dPT=f_dPT[1,]),resp="J4",summary=FALSE,draw_ids=draw_id)
  
  
  f_exPO = posterior_predict(med_prior,newdata=data.frame(P=df$P,dPT=f_dPT[1,],J1=f_j1[1,],J2=f_j2[1,],J3=f_j3[1,],J4=f_j4[1,]),resp="exPO",summary=FALSE,draw_ids=draw_id)
  
  return(data.frame(P=df$P,dPT=f_dPT[1,],J1=f_j1[1,],J2=f_j2[1,],J3=f_j3[1,],J4=f_j4[1,],exPO=f_exPO[1,],draw_ids = draw_id))

}

df_prior = data.frame()
for (ix in 1:25){
  message(ix)
  df_prior = rbind(df_prior,iterative_draw_posterior(med_prior,df,ix))
}

first(df_prior)
```
```{r}
med_prior
```

## Initial Plotting

```{r}
#ggplot(df_prior,aes(x=P,y=exPO))+geom_point(alpha=0.2) + stat_summary(color="red")

#ggplot(df_prior,aes(x=P,y=exPO))+stat_summary(position=position_nudge(x=0.1))+geom_point(alpha=0.2)

#ggplot(df_prior[df_prior$sample < 50,],aes(x=dPT,color=as.factor(P),group=as.factor(sample)))+geom_density()

ggplot(df_prior,aes(x=dPT))+geom_histogram()

ggplot(df_prior,aes(x=J1,color=P))+geom_density()
ggplot(df_prior,aes(x=exPO,color=P))+geom_density()

ggplot(df_prior,aes(y=J1,x=dPT))+stat_bin_hex()
ggplot(df_prior,aes(y=J1,x=J2))+stat_bin_hex()
ggplot(df_prior,aes(y=J1,x=exPO))+stat_bin_hex()
  ggplot(df_prior,aes(y=dPT,x=exPO))+stat_bin_hex()

#ggplot(df_prior,aes(y=exPO,x=J1,color=dPT))+geom_point()+facet_grid(0~P)

```
## Power analysis

```{R}
#| output: false

n_sim <- 100
n <- 200


sims <- tibble(seed = 1:n_sim)
runFun <- function(seed){
  message(seed)
  d_new = gen_data(1,n=n)
  sim_y = iterative_draw_posterior(med_prior,d_new,seed)
  med_model = update(med_model,newdata = sim_y,seed=seed)
  return(fixef(med_model))
}
sims = sims %>% rowwise() %>% mutate(brms=list(runFun(seed)))
  
```

```{r}
est = sims$brms[[1]]

is_significant = function(est){
res = mapply(function(x,y)x>0 | y<0, est[,3],est[,4])
return(as_tibble(t(res)))

}
sims2 = sims %>% rowwise() %>% mutate(sig = list(is_significant(brms)))%>% unnest(cols=c(sig))

colMeans(sims2[,3:dim(sims2)[2]])
```